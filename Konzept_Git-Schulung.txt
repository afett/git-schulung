Konzept zur
Git-Schulung
Till Salzer
Robert Peters


Zielgruppe
Ziel der Schulung
Zu erledigen
Chat-Bereich
Fahrplan (Vorschlag)
I Begrüßung und Einstieg
II Theorie
Technik prüfen
Pause
III Praxis
Umgang mit Versionskontrollsystemen
Warum brauche ich eine Versionskontrolle?
Aus Management-Sicht
Aus Entwicklersicht
Etwas exotischer
Wann lohnt sich der Einsatz eines SCM?
Anwendungsszenarien SCM
Source Code Management
Configuration Management
Archivierung
Was gehört in ein SCM? Was nicht?
Sonderfall Binärdatei
Gewicht von SCM
Einführung in Git
Konzepte
Installation
Windows
Unix
Anlegen eines Repos
Clonen eines Repos
Einchecken einer Datei
Branches
Konflike
Workflows
Weitere Quellen


Zielgruppe
Bei der Zielgruppe handelt es sich um Mitarbeiter der i.S.X. Software. Das umfasst sowohl Entwickler, mit langjähriger Berufserfahrung und einem hohen Verständnis von Versionsverwaltungssystemen aller Art, als auch Studenten, die noch nie mit solch einer Software in Berührung gekommen sind.
Ziel der Schulung
Am Ende der Git-Schulung soll jeder Teilnehmer in der Lage sein, mit dem verteilten Versionsverwaltungsystem Git umgehen zu können. Das umfasst alle Anwendungsfälle, die bei der täglichen Arbeit im Team in Softwareentwicklungsprojekten auftreten.


Letzten Endes soll Git das derzeit in der i.S.X. Software eingesetzte Versionsverwaltungssystem SVN ersetzen.
Zu erledigen
* Dieses Dokument benötigt einen Konsistenzcheck. Beispielsweise werden unterschiedliche Begriffe für Versionskontrollsysteme verwendet.
Chat-Bereich
Robert: Ich würde vorschlagen die Schulung auf 2 Tage zu verteilen. Am 1. Tag gibt es die Einführung was Versionsverwaltungssysteme sind, was man mit denen macht. Zunächst für zentrale und dann der Schwenk zu den Dezentralen mit Blick auf Git. Beendet wird der Tag mit der Funktionsweise von Git. Also wie das aufgebaut ist und funktioniert. Am 2. Tag könnten Anwendungsfälle durchgenommen werden. Dafür wird viel Quelltext benötigt. Die Awendungsfälle müssen sinnvoll und realitätsnah sein. Auch sollte zu jedem Anwendungsfall via Tree gezeigt werden was passiert. Da kann man auch gut das Publikum einbeziehen in Sachen was wollen wir? Wie sieht das vorher aus und wie sieht es nachher aus.
Der erste Tag darf aber nicht nur Theorie beinhalten. Dann sind alle gegen uns.
Inzwischen bin ich eher für einen Tag.
TSA: Ok, ein Tag sollte reichen.
Gedankenfetzen
- Konvertieren ist schlecht: $Id$
- automatische Filetype-Erkennung ist unsicher
- SCM ist immer Zeilenbasiert (CR/LF-Freude)
- xdiff für Binärformate, kein Mergen etc (spart nur Platz)
________________


Fahrplan (Vorschlag)




	Name
	Dauer
	I
	Begrüßung und Einstieg
	10 Minuten
	II
	Theorie
	

	

	Technik prüfen
	

	

	Pause
	

	III
	Praxis
	

	

I Begrüßung und Einstieg
Voraussetzungen: Alle Teilnehmer und Vortragende sind anwesend und haben ihre Plätze eingenommen.
Inhalt:
* Alle Anwesenden willkommen heißen
* Grund für den Workshop erläutern
* Aufbau des Abends erläutern
II Theorie
Voraussetzungen: 
Inhalt: Achtung: Reihenfolge den Abhängkeiten anpassen!
* Warum braucht man Versionkontrolle?
* Wann lohnt sich der Einsatz?
* Welche Anwendungszenarien gibt es?
* Was gehört unter Versionkontrolle und was nicht und warum?
* Grundbegriffe beim Umgang mit Versionskontrollsystemen
   * Repository
   * Commit
   * Branch
   * Trunk/Master/Main-Branch
   * Tag
* Konzepte und Workflows verschiedener Versionskontrollsysteme
   * Zentral
   * Dezentral
Technik prüfen
Voraussetzungen: Jeder hat einen Rechner und Verbindung zur Test-VM
Inhalt:
* Jeder Prüft, ob er sich mit der Test-VM verbinden kann.
Pause
Voraussetzungen: 
Inhalt:
* Entpannung
* Gerne auch Fragen
III Praxis
Voraussetzungen: Jeder hat getestet, dass er auf die Test-VM kommt.
Inhalt: (Wir bekommen hier Probleme, da nicht alle mit Linux umgehen können.)
* Lokal
   * Repository anlegen
   * Datei hinzufügen
   * Datei bearbeiten
   * Git Ignore
   * Branches
   * Merges
   * Tags
   * Git Log
* Remote
   * Git Clone
   * Add Remote
   * Fetch/Pull
   * Merge
   * Push


Umgang mit Versionskontrollsystemen
Warum brauche ich eine Versionskontrolle?
Aus Management-Sicht
* Was haben wir welchem Kunden wann geliefert?
* Wer hat das Codefragment xxx wann eingebracht? War das legal?
* Haben wir unsere Version xxx vor oder nach yyy erstellt? Können wir das beweisen?
* Welcher Entwickler hat wieviel Code beigesteuert? (Nur bedingt Verwertbar.)
Aus Entwicklersicht
* Es funktioniert (nicht mehr), was habe ich geändert?
* Hier ist etwas neu, wer kann mir das erklären?
* Das Mutterprojekt ist überarbeitet worden, ich brauche das in unserem Projekt.
Etwas exotischer
* Bei John Doe funktioniert's, das brauche ich hier.
* Ich habe da eine Idee, aber ich darf das Projekt nicht gefährden.
* Wann ist dieser Fehler reingekommen? Was ist die letzte Version, die noch funktioniert hat?
* Wenn mein Rechner kaputt geht, will ich nicht alles nochmal machen müssen
Wann lohnt sich der Einsatz eines SCM?
* Wann lohnt sich der Einsatz eines Versionskontrollsystems?
   * Warum auch für externerne Mitarbeiter interessant?
   * Einsatzszenarien
* “Gewicht” der SCMs unterschiedlich... Entscheidungen später
* Zusammenfassung: IMMER (Time Machine)
Anwendungsszenarien SCM
Source Code Management
* klassisches Szenario
* Repo endhält Source Code
* Branches und Mergen sind normal
* History Rewrite möglich (Definition?)
Zusammenfassung: Repo ist Ausgangspunkt für die Ableitung von Artefakten (aka Software Kompilat)
Configuration Management
* nahe am Szenario Source Code Management
* Repo enthält Konfigurationsdateien, geordnet nach Umgebungen; keinen Code (im Source SCM!), keine Buildartefakte (im Build-Archiv!)
* Branches und Merges eingeschränkt sinnvoll
* History Rewrite eingeschränkt: Alte Konfigurationen sollten zugänglich bleiben
Zusammenfassung: Nicht Teil des Softwareentwicklungsprozesses, aber Teil des Software Lebenszyklus. Orientiert sich stark an Erfordernissen des Anwendungsbetriebs.
Archivierung
* zeitlich lineare Ablage von Artefakten (Lieferungen, Dokumente, ...)
* Repos synchronisiert mit Entwicklungs-Repos (z.B. via Tagging: “Docs für Build x”)
* keine Branches (möglicherweise pro Kunde?), kein Mergen
* kein History Rewrite (revisionssicher)
Zusammenfassung: Repo ist Ablage, SCM wird hier “zweckentfremdet”
Was gehört in ein SCM? Was nicht?
Achtung! Abhängig von Anwendungsszenarien! Szenario Source Code Management wird angenommen.[a]


* Was gehört nicht unter Versionskontrolle bzw. wie geht man damit um? (+Konsequenzen)
   * individuelle Daten (Nutzername, Password, lokaler Port) - Projektkultur!
   * keine sensiblen Daten (kein Zugriffsschutz) - Projektkultur!
   * Keine abgeleiteten Inhalte (!)
      * tempfiles
      * IDE-Konfigurationen
      * Kompilate
      * ...
      * (alles, was aus dem generiert werden kann, was schon eingecheckt ist)
   * Commits werden nur veröffentlicht, wenn das Projekt kompiliert? (private/öffentliche Commits)
* Dokumentation der Arbeit
   * Saubere Commits erleichtern das Auffinden selbiger
   * sinnvolle Kommentare sind wichtig!
   * * Branching-Konzept
   * production
   * development
   * testing?
   * mehrere Projekte in einem Repository
Sonderfall Binärdatei
- alles, was nicht (zeilenweise?) gemerged werden kann
- kann man nicht mergen
- Bilder, Zips


warum? context diff -- je größer die änderung, desto wahrscheinlicher falsch positive übereinstimmung, mergeerfolg unwahrscheinlicher -> formate, die das nicht erlauben, sind ungeeignet für merges (sollten extern verglichen werden)


Einige SCMs bringen Plugin-System mit, um Binärdateien zu mergen. Grundsätzlich verkomplizieren solche Systeme aber das Management (siehe auch Sonderfall Keyword Substitution).


Sonderfall Keyword Substitution
- bekannt von $Id$ & Co aus RCS, CVS und SVN
- nicht in Binärdateien
- erfordert sichere Erkennung der Dateitypen
- ermöglicht Identifizierung von Code losgelöst vom SCM
- Alternative: Keyword Substitution im Build Prozeß: simpler, zuverlässig, hinreichend aussagekräftig
Gewicht von SCM
* Turn-Around-Zeit: extrem kurze Zeiten erweitern mögliche Anwendungsfälle
* Client-Server oder Distributed (Sonderfall RCS als “Fliegengewicht”)
* “intrusiveness”: transparenter Betrieb vs. dediziertes Ein-/Auschecken und read-only
* Offline-Fähigkeit? (erlaubt Arbeit trotz Ausfall vom Zentralserver oder ohne Netz)
* Verfügbarkeit auf allen Plattformen?
* Verfügbarkeit von Tools
* Kosten (SCMs werden immer noch mit Phantasiepreisen verkauft)


--- break ---
Einführung in Git
Konzepte
Feld ebnen: Was sind bekannte SCM? (SVN, CVS, RCS, SourceSafe, ClearCase, Synergy)
Was wird dort versioniert? - Dateien, Repository (SVN)
Wie wird dort versioniert? - Server-basiert (RCS-), zentral (RCS-)
Wie wird parallele Arbeit gehandhabt? - Locking, Branching, Merging
Installation
Windows
Zwei (?) Varianten verfügbar: Cygwin und MSys Git.
Explorer-Integration Tortoise-Git
-> Hinweis: Referenz ist die CLI-Version
Unix
Installation aus den Sourcen. Dazu muß ein Linux-System bereitstehen (VM?); bei dem für die Schulung verwendeten Image muß git bereits compilierfähig sein. Zur Demonstration kann ein echtes Vanilla-System verwendet werden, für das noch Pakete installiert werden müssen. Ein Minimal-Script, welches Git auf CentOS 5.2 installiert, ist hier: https://gist.github.com/146206




Anlegen eines Repos
Clonen eines Repos
Einchecken einer Datei
Branches
Konflike
Workflows
Weitere Quellen


[a]Ist das doppelt bzgl. Anwendungsszenarien? 
________________


 —Till Salzer


Ich denke einige Punkte decken sich mit anderen Anwendungsszenarien. Die ISX ist ein Softwareentwicklungsunternehmen und deren Mitarbeiter sollten selbst darauf schließen können, was wann rein kommt und was nicht. Sobald sie die Funktionsweise von SCMs kennen.
________________


 —r2p2.gw